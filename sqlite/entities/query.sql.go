// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package entities

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user (first_name, last_name, email, password) values (?, ?, ?, ?)
    RETURNING first_name, last_name, email, created_at
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

type CreateUserRow struct {
	FirstName string
	LastName  string
	Email     string
	CreatedAt sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email FROM user WHERE email = ?
`

type GetUserByEmailRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUserByEmailForLogin = `-- name: GetUserByEmailForLogin :one
SELECT id, email, password FROM user WHERE email = ?
`

type GetUserByEmailForLoginRow struct {
	ID       int64
	Email    string
	Password string
}

func (q *Queries) GetUserByEmailForLogin(ctx context.Context, email string) (GetUserByEmailForLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailForLogin, email)
	var i GetUserByEmailForLoginRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, created_at FROM user WHERE id = ?
`

type GetUserByIdRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	CreatedAt sql.NullString
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
